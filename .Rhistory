setwd("C:/Users/BUSINESS/Downloads/DAYO SAMUEL/Statistical Analysis")
library(corrplot)
library(caret)
library("TTR")
library("forecast")
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd	<- sd(forecasterrors)
mymin <- min(forecasterrors) - mysd*5
mymax <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
library(tidyverse)
library(dplyr)
# importing data
# set the correct working directory to capture data
Combined_Class <-read.csv("Combined_Class.csv")
UnderDeveloped_EU <- Combined_Class %>% select(1:2, 6,7)
Reduced_UnderDeveloped_EU <- filter(UnderDeveloped_EU, Development_Class == "UnderDeveloped Countries" )
head(as.data.frame(Reduced_UnderDeveloped_EU))
str(Reduced_UnderDeveloped_EU)
#Define the obj of the Time Series analysis.
Reduced_UnderDeveloped_EU_1 <- Reduced_UnderDeveloped_EU[ ,c('Percentage_Total_Unemployment',
'Year')]
Reduced_UnderDeveloped_EU_1
TotalUnemployment_UnderDeveloped <-Reduced_UnderDeveloped_EU_1[,c('Percentage_Total_Unemployment')]
TotalUnemployment_UnderDeveloped
TotalUnemployment_UnderDevelopedseries <- ts(TotalUnemployment_UnderDeveloped,frequency = 12, start = c(2012), end = c(2021))
TotalUnemployment_UnderDevelopedseries
#Ploting Time series.
plot.ts(TotalUnemployment_UnderDevelopedseries)
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
plot.ts(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriescomponents)
#Seasonally Adjusting
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesseasonallyadjusted <- TotalUnemployment_UnderDevelopedseries - TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriesseasonallyadjusted)
#Predictive model for the log of yearly unemployment in EU using Holtwinters
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts <- HoltWinters(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts
TotalUnemployment_UnderDevelopedseriesforecasts$SSE
plot(TotalUnemployment_UnderDevelopedseriesforecasts)
#Forecasts Jan 2021 to Dec 2025
TotalUnemployment_UnderDevelopedseriesforecasts2 <- forecast(TotalUnemployment_UnderDevelopedseriesforecasts, h=48)
TotalUnemployment_UnderDevelopedseriesforecasts2
plot(TotalUnemployment_UnderDevelopedseriesforecasts2)
acf(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag.max=20 , na.action = na.pass)
#
acf(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag.max=20 , na.action = na.pass)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals) # make time series plot
TotalUnemployment_UnderDevelopedseriesforecasts2$residuals <- TotalUnemployment_UnderDevelopedseriesforecasts2$residuals [!is.na(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)]
plotForecastErrors(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
mean(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
#Forcasting using Arima
#Getting the model
acf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE) # get the values
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20)
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE)
auto.arima(TotalUnemployment_UnderDeveloped)
auto.arima(TotalUnemployment_Developed,ic='bic')
TotalUnemployment_UnderDevelopedseriesarima <- arima(TotalUnemployment_UnderDevelopedseries, order=c(1,0,0))
TotalUnemployment_UnderDevelopedseriesarima
TotalUnemployment_UnderDevelopedseriesforecasts1 <- forecast(TotalUnemployment_UnderDevelopedseriesarima , h=48)
TotalUnemployment_UnderDevelopedseriesforecasts1
plot(TotalUnemployment_UnderDevelopedseriesforecasts1)
acf(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag.max=20)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
plotForecastErrors(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
mean(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
library(car)
library(corrplot)
library(caret)
Developed_EU <- read.csv(file = 'Developed_countries.csv')
head(as.data.frame(Developed_EU))
str(Developed_EU)
#Define the obj of the regression analysis.
Developed_EU_reduced <- Developed_EU[ ,c('Total_Population', 'Percentage_Total_Unemployment',
'GDP_US_DOLLARS')]
cor(Developed_EU_reduced)
corrplot(cor(Developed_EU_reduced))
#Step 3 perform the linear regression analysis.
?Im
#To write Y= Percentage_Total_Unemployment, X= Total_Population
model_5 <-lm(Percentage_Total_Unemployment ~ Total_Population, Developed_EU_reduced)
summary.lm(model_5)
plot(Percentage_Total_Unemployment ~ Total_Population, Developed_EU_reduced,
col = "blue",
main = "Regression: Percentage of Total Unemployment & Total Population",
xlab = "Total Population",
ylab = "Total Unemployment")
abline(model_5, col="red")
plot(model_5, 1)
#Normality of residuals:
plot(model_5, 2)
#Equal variances of the residuals (Homoscedasticity)
plot(model_5, 3)
UnderDeveloped_EU <- read.csv(file = 'UnderDeveloped_countries.csv')
head(as.data.frame(UnderDeveloped_EU))
str(UnderDeveloped_EU)
#Define the obj of the regression analysis.
UnderDeveloped_EU_reduced <- UnderDeveloped_EU[ ,c('Total_Population', 'Percentage_Total_Unemployment',
'GDP_US_DOLLARS')]
cor(UnderDeveloped_EU_reduced)
corrplot(cor(UnderDeveloped_EU_reduced))
#Step 3 perform the linear regression analysis.
?Im
#To write Y= Percentage_Total_Unemployment, X= Total_Population
model_6 <-lm(Percentage_Total_Unemployment ~ Total_Population, Old_EU_reduced)
plot(Percentage_Total_Unemployment ~ Total_Population, UnderDeveloped_EU_reduced,
col = "blue",
main = "Regression: Percentage of Total Unemployment & Total Population",
xlab = "Total Population",
ylab = "Total Unemployment")
abline(model_6, col="red")
plot(model_6, 1)
#Normality of residuals:
plot(model_6, 2)
#Equal variances of the residuals (Homoscedasticity)
plot(model_6, 3)
#Step 3 perform the linear regression analysis.
?Im
#To write Y= Percentage_Total_Unemployment, X= Total_Population
model_1 <-lm(Percentage_Total_Unemployment ~ Total_Population, New_EU_reduced)
summary.lm(model_1)
#Define the obj of the regression analysis.
New_EU_reduced <- New_EU[ ,c('Total_Population', 'Percentage_Total_Unemployment',
'GDP_US_DOLLARS')]
cor(New_EU_reduced)
corrplot(cor(New_EU_reduced))
#Step 3 perform the linear regression analysis.
?Im
#To write Y= Percentage_Total_Unemployment, X= Total_Population
model_1 <-lm(Percentage_Total_Unemployment ~ Total_Population, New_EU_reduced)
summary.lm(model_1)
plot(Percentage_Total_Unemployment ~ Total_Population, New_EU_reduced,
col = "blue",
main = "Regression: Percentage of Total Unemployment & Total Population",
xlab = "Total Population",
ylab = "Total Unemployment")
abline(model_1, col="red")
plot(model_1, 1)
#Normality of residuals:
plot(model_1, 2)
#Equal variances of the residuals (Homoscedasticity)
plot(model_1, 3)
Old_EU <- read.csv(file = 'Old_EU_countries.csv')
head(as.data.frame(Old_EU))
str(Old_EU)
#Define the obj of the regression analysis.
Old_EU_reduced <- Old_EU[ ,c('Total_Population', 'Percentage_Total_Unemployment',
'GDP_US_DOLLARS')]
cor(Old_EU_reduced)
corrplot(cor(Old_EU_reduced))
#Step 3 perform the linear regression analysis.
?Im
#To write Y= Percentage_Total_Unemployment, X= Total_Population
model_2 <-lm(Percentage_Total_Unemployment ~ Total_Population, Old_EU_reduced)
summary.lm(model_2)
plot(Percentage_Total_Unemployment ~ Total_Population, Old_EU_reduced,
col = "blue",
main = "Regression: Percentage of Total Unemployment & Total Population",
xlab = "Total Population",
ylab = "Total Unemployment")
abline(model_2, col="red")
plot(model_2, 1)
#Normality of residuals:
plot(model_2, 2)
#Equal variances of the residuals (Homoscedasticity)
plot(model_2, 3)
library(corrplot)
library(caret)
library("TTR")
library("forecast")
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd	<- sd(forecasterrors)
mymin <- min(forecasterrors) - mysd*5
mymax <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
library(tidyverse)
library(dplyr)
# importing data
# set the correct working directory to capture data
Combined_Class <-read.csv("Combined_Class.csv")
UnderDeveloped_EU <- Combined_Class %>% select(1:2, 6,7)
Reduced_UnderDeveloped_EU <- filter(UnderDeveloped_EU, Development_Class == "UnderDeveloped Countries" )
head(as.data.frame(Reduced_UnderDeveloped_EU))
str(Reduced_UnderDeveloped_EU)
#Define the obj of the Time Series analysis.
Reduced_UnderDeveloped_EU_1 <- Reduced_UnderDeveloped_EU[ ,c('Percentage_Total_Unemployment',
'Year')]
Reduced_UnderDeveloped_EU_1
TotalUnemployment_UnderDeveloped <-Reduced_UnderDeveloped_EU_1[,c('Percentage_Total_Unemployment')]
TotalUnemployment_UnderDeveloped
TotalUnemployment_UnderDevelopedseries <- ts(TotalUnemployment_UnderDeveloped,frequency = 12, start = c(2012), end = c(2021))
TotalUnemployment_UnderDevelopedseries
#Ploting Time series.
plot.ts(TotalUnemployment_UnderDevelopedseries)
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
plot.ts(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriescomponents)
#Seasonally Adjusting
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesseasonallyadjusted <- TotalUnemployment_UnderDevelopedseries - TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriesseasonallyadjusted)
#Predictive model for the log of yearly unemployment in EU using Holtwinters
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts <- HoltWinters(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts
TotalUnemployment_UnderDevelopedseriesforecasts$SSE
plot(TotalUnemployment_UnderDevelopedseriesforecasts)
#Forecasts Jan 2021 to Dec 2025
TotalUnemployment_UnderDevelopedseriesforecasts2 <- forecast(TotalUnemployment_UnderDevelopedseriesforecasts, h=48)
TotalUnemployment_UnderDevelopedseriesforecasts2
plot(TotalUnemployment_UnderDevelopedseriesforecasts2)
#
acf(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag.max=20 , na.action = na.pass)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals) # make time series plot
TotalUnemployment_UnderDevelopedseriesforecasts2$residuals <- TotalUnemployment_UnderDevelopedseriesforecasts2$residuals [!is.na(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)]
plotForecastErrors(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
mean(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
#Forcasting using Arima
#Getting the model
acf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE) # get the values
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20)
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE)
auto.arima(TotalUnemployment_UnderDeveloped)
auto.arima(TotalUnemployment_Developed,ic='bic')
TotalUnemployment_UnderDevelopedseriesarima <- arima(TotalUnemployment_UnderDevelopedseries, order=c(1,0,0))
TotalUnemployment_UnderDevelopedseriesarima
TotalUnemployment_UnderDevelopedseriesforecasts1 <- forecast(TotalUnemployment_UnderDevelopedseriesarima , h=48)
TotalUnemployment_UnderDevelopedseriesforecasts1
plot(TotalUnemployment_UnderDevelopedseriesforecasts1)
acf(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag.max=20)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
plotForecastErrors(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
mean(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
library(corrplot)
library(caret)
library("TTR")
library("forecast")
plotForecastErrors <- function(forecasterrors)
{
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd	<- sd(forecasterrors)
mymin <- min(forecasterrors) - mysd*5
mymax <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
library(tidyverse)
library(dplyr)
# importing data
# set the correct working directory to capture data
Combined_Class <-read.csv("Combined_Class.csv")
UnderDeveloped_EU <- Combined_Class %>% select(1:2, 6,7)
Reduced_UnderDeveloped_EU <- filter(UnderDeveloped_EU, Development_Class == "UnderDeveloped Countries" )
head(as.data.frame(Reduced_UnderDeveloped_EU))
str(Reduced_UnderDeveloped_EU)
#Define the obj of the Time Series analysis.
Reduced_UnderDeveloped_EU_1 <- Reduced_UnderDeveloped_EU[ ,c('Percentage_Total_Unemployment',
'Year')]
Reduced_UnderDeveloped_EU_1
TotalUnemployment_UnderDeveloped <-Reduced_UnderDeveloped_EU_1[,c('Percentage_Total_Unemployment')]
TotalUnemployment_UnderDeveloped
TotalUnemployment_UnderDevelopedseries <- ts(TotalUnemployment_UnderDeveloped,frequency = 12, start = c(2012), end = c(2021))
TotalUnemployment_UnderDevelopedseries
#Ploting Time series.
plot.ts(TotalUnemployment_UnderDevelopedseries)
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
plot.ts(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriescomponents)
#Seasonally Adjusting
TotalUnemployment_UnderDevelopedseriescomponents <- decompose(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesseasonallyadjusted <- TotalUnemployment_UnderDevelopedseries - TotalUnemployment_UnderDevelopedseriescomponents$seasonal
plot(TotalUnemployment_UnderDevelopedseriesseasonallyadjusted)
#Predictive model for the log of yearly unemployment in EU using Holtwinters
logTotalUnemployment_UnderDevelopedseries <- log(TotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts <- HoltWinters(logTotalUnemployment_UnderDevelopedseries)
TotalUnemployment_UnderDevelopedseriesforecasts
TotalUnemployment_UnderDevelopedseriesforecasts$SSE
plot(TotalUnemployment_UnderDevelopedseriesforecasts)
#Forecasts Jan 2021 to Dec 2025
TotalUnemployment_UnderDevelopedseriesforecasts2 <- forecast(TotalUnemployment_UnderDevelopedseriesforecasts, h=48)
TotalUnemployment_UnderDevelopedseriesforecasts2
plot(TotalUnemployment_UnderDevelopedseriesforecasts2)
acf(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag.max=20 , na.action = na.pass)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals) # make time series plot
TotalUnemployment_UnderDevelopedseriesforecasts2$residuals <- TotalUnemployment_UnderDevelopedseriesforecasts2$residuals [!is.na(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)]
plotForecastErrors(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
mean(TotalUnemployment_UnderDevelopedseriesforecasts2$residuals)
#Forcasting using Arima
#Getting the model
acf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE) # get the values
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20)
pacf(TotalUnemployment_UnderDevelopedseries, lag.max=20, plot=FALSE)
auto.arima(TotalUnemployment_UnderDeveloped)
auto.arima(TotalUnemployment_Developed,ic='bic')
TotalUnemployment_UnderDevelopedseriesarima <- arima(TotalUnemployment_UnderDevelopedseries, order=c(1,0,0))
TotalUnemployment_UnderDevelopedseriesarima
TotalUnemployment_UnderDevelopedseriesforecasts1 <- forecast(TotalUnemployment_UnderDevelopedseriesarima , h=48)
TotalUnemployment_UnderDevelopedseriesforecasts1
plot(TotalUnemployment_UnderDevelopedseriesforecasts1)
acf(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag.max=20)
Box.test(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals, lag=20, type="Ljung-Box")
plot.ts(TotalUnemployment_UnderDevelopedseriesforecasts1$residuals)
setwd("C:/Users/BUSINESS/Downloads/DAYO SAMUEL/Statistical Analysis")
